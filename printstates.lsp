(defun printstates (puzlist puzsize)
	(let ((puzperline) (i) (j) (k) (m))
		(setf puzperline (floor (/ 60 (+ 4 (* 3 puzsize)))))
		;loop though the number of lines of puzzles
		(dotimes (i (ceiling (/ (length puzlist) puzperline)) () )
			;loop through the lines of a puzzle
			(dotimes (j puzsize () )
				;loop through the puzzles
				(if (> (* (1+ i) puzperline) (length puzlist))
					(setf m (- (length puzlist) (* i puzperline)))
				(setf m puzperline))
				(dotimes (k m () )
				(if (and (= j (floor (/ puzsize 2))) (not (= (length puzlist) (+ 1 k (* i puzperline)))))
					(format t " ~2d ~2d ~2d  -> " 
						(nth (+ 0 (* j puzsize))(nth (+ k (* i puzperline)) puzlist ))
						(nth (+ 1 (* j puzsize))(nth (+ k (* i puzperline)) puzlist ))
						(nth (+ 2 (* j puzsize))(nth (+ k (* i puzperline)) puzlist ))
					)
					(format t " ~2d ~2d ~2d     " 
						(nth (+ 0 (* j puzsize))(nth (+ k (* i puzperline)) puzlist ))
						(nth (+ 1 (* j puzsize))(nth (+ k (* i puzperline)) puzlist ))
						(nth (+ 2 (* j puzsize))(nth (+ k (* i puzperline)) puzlist ))
					)
				)
				)
				(format t "~%")
			)
			(format t "~%")
		)
	)
)